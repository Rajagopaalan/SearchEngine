

package edu.asu.irs13;
//import com.lucene.index.*;
import java.io.*;

import java.util.*;
/** Extract the Link Matrix that has been generated by LinkGen
 Provides functions outLinks and Citations. outLinks takes as input a filename and returns how many other pages in the stored
 repository it points to. Method citations accepts the fileName and returns a Vector containing fileNames of Files in the
repository that cite the given file.

 */

public class LinkExtract {
	Hashtable hashids = new Hashtable(4000);

	File opendirectory;
	String repository = "";
	String filelist[] = {"a","b"};

	/** Constructor takes as input the Directory name where files are stored and Filename where the LinkMatrix generated by
        LinkGen is stored. Loads the datastructures for use by other methods*/
	public LinkExtract(String rep, String matrixFile)
	{



		repository = rep;

		opendirectory = new File(repository);
		if(opendirectory.isDirectory())
		{
			filelist = opendirectory.list();
			Arrays.sort(filelist);
		}

		try{
			FileReader fread = new FileReader(matrixFile);
			BufferedReader in = new BufferedReader(fread);
			String sin = in.readLine();
			while(sin != null)
			{


				String spointer = sin.substring(0,sin.indexOf("-->"));

				spointer = spointer.substring(7);
				sin = sin.substring(sin.indexOf("[")+1,sin.indexOf("]"));
				hashids.put(spointer,sin);
				sin = in.readLine();

			}
			in.close();
			fread.close();
		}catch(FileNotFoundException e1){}
		catch(IOException e2){}

		return;

	}

	/** Returns the list of all files in the repository*/
	public ArrayList Fileslist()
	{
		ArrayList retList = new ArrayList(0);
		for(int it =0; it<filelist.length; it++)
			retList.add(filelist[it]);

		return retList;
	}

	/** Returns a count of files pointed to by the given FileName*/
	public int  outLinks(String fileName)
	{
		int count =0;
		String list = (String)hashids.get(fileName);
		int j=0;
		while((j=list.indexOf(","))!=-1)
		{ list = list.substring(j+1,list.length()); count++;}
		if (list.length() >0) count++;

		return count;
	}

	/** Returns a list of files/URLs to which the given filename/URL points to */
	public ArrayList Links(String fileName)
	{
		String list = (String)hashids.get(fileName);
		int j=0;
		ArrayList retList = new ArrayList();
		if (list != null) {
			while ( (j = list.indexOf(",")) != -1) {
				String tmp = list.substring(0, j);
				retList.add(tmp);
				list = list.substring(j + 1, list.length());
			}
			if (list.length() > 0)
				retList.add(list);
		}
		else
			retList = null;

		return retList;
	}

	/** Returns a list of files/URLs that point to the given file/URL */
	public ArrayList Citations(String fileName)
	{
		Enumeration enumval = hashids.keys();
		ArrayList retList =  new ArrayList();
		while(enumval.hasMoreElements())
		{
			String key = (String)enumval.nextElement();
			String cmpstring = (String)hashids.get(key);
			if(cmpstring.indexOf(fileName)!=-1)
				retList.add(key);
		}
		return retList;
	}


	/** Demonstrates how the various files should be generated and prints the Citations and OutLinks for the first 6
        files in the  directory. This program should be invoked as :            java LinkExtract "Directory_FilesStored" "LinkMatrixFile". Unless changed Link Matrix File is called "Hashedlinks" */
	public static void main(String[] args)
	{
		LinkExtract lextract;
		String rep = "result3";
		String matrixfile = "Hashedlinks";
		if(args.length >= 2)
		{
			rep = args[0];
			matrixfile = args[1];
		}

		lextract = new LinkExtract(rep, matrixfile);

		ArrayList fllist = new ArrayList();
		fllist = lextract.Fileslist();

		for(int ifi =0 ; ifi < 6 ;ifi++)
		{
			String flname = (String)fllist.get(ifi);
			int flout = lextract.outLinks(flname);
			ArrayList pointsTo =  lextract.Links(flname);
			ArrayList pointedby = lextract.Citations(flname);
			System.out.println(" The file :" + flname + "  points To : "+flout);
			for(int ipto = 0; ipto < pointsTo.size(); ipto ++)
				System.out.println("\n Points to: " + (String)pointsTo.get(ipto));
			for(int pto =0; pto < pointedby.size();pto++)
				System.out.println("\n Pointed by: " + (String)pointedby.get(pto));
		}
		return;
	}
}





